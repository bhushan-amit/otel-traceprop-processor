receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - "*"
  hostmetrics:
    scrapers:
      load:
      memory:
  prometheus/otelcol:
    config:
      scrape_configs:
        - job_name: 'otelcol'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']

processors:
  tracepropagator: {}

exporters:
  debug:
    verbosity: detailed
  otlp/tempo:
    endpoint: "10.100.32.88:4317"
    tls:
      insecure: true
  prometheusremotewrite:
    endpoint: "http://10.100.32.79:3100/api/v1/write"  # Prometheus remote write endpoint
    target_info:
      enabled: true
    resource_to_telemetry_conversion:
      enabled: true

connectors:
  spanmetrics:
    histogram:
      explicit:
        buckets: [100us, 1ms, 2ms, 6ms, 10ms, 100ms, 250ms]
    dimensions:
      - name: http.request.method
        default: GET
      - name: http.response.status_code
      - name: host.name
      - name: http.route
      - name: TraceParentName
        default: IsParent
    exemplars:
      enabled: true
    dimensions_cache_size: 1000
    aggregation_temporality: "AGGREGATION_TEMPORALITY_CUMULATIVE"
    metrics_flush_interval: 15s
    metrics_expiration: 5m
    events:
      enabled: true
      dimensions:
        - name: exception.type
        - name: exception.message
    resource_metrics_key_attributes:
      - service.name
      - telemetry.sdk.language
      - telemetry.sdk.name


service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [tracepropagator]
      exporters: [otlp/tempo, spanmetrics]

    metrics/spanmetrics:
      receivers: [spanmetrics, otlp, hostmetrics]
      exporters: [prometheusremotewrite]

    metrics/hostmetrics:
      receivers: [ prometheus/otelcol ]
      exporters: [prometheusremotewrite]